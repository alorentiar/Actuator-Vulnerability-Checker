import sys
import os
import requests
import ssl
import OpenSSL
import re
import datetime
import ipaddress

timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

def check_by_ip(ipaddr, output_file):
    print("=====================================================")
    print("IP to be checked : "+ipaddr)
    print(ipaddr)
    actuatorpath = "/actuator"
    #getting common name
    cert = ssl.get_server_certificate((ipaddr, 443))
    cert_obj = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
    cn = cert_obj.get_subject().commonName
    try:
        response = requests.get("https://"+cn+actuatorpath)
        print(response.status_code)
        # print(response.text)
        if(response.status_code==200):
            print("CONFIRMED Found Actuator Path") 
            res = ipaddr+" a.k.a "+cn+" CONFIRMED found actuator path\n"
        else:
            print("Actuator Path Not Found")   
            res = ipaddr+" a.k.a "+cn+" Good To Go (NOT CONFIRMED)\n"
    except:
        print("Request Failed")
        res = ipaddr+" a.k.a "+cn+" Request Failed\n"
    with open(output_file, "a") as f:
        f.write(res)
    print("=====================================================")


def check_by_domain(domain, output_file):
    print("=====================================================")
    print("Domain to be checked : "+domain) 
    actuatorpath = "/actuator"
    try:
        response = requests.get(domain+actuatorpath)
        print(response.status_code)
        # print(response.text)
        if(response.status_code==200):
            print("CONFIRMED Found Actuator Path") 
            res = domain+" CONFIRMED found actuator path\n"
        else:
            print("Actuator Path Not Found")  
            res = domain+" Good To Go (NOT CONFIRMED)\n" 
    except:
        print("Request Failed")
        res = domain+" Request Failed\n"
    with open(output_file, "a") as f:
        f.write(res)
    print("=====================================================")

def check_by_ip_subnet(ipaddr, output_file):
    print("This is ipv4 subnet "+ipaddr)
    ip_net  = ipaddress.ip_network(ipaddr, strict=False)
    for ip in ip_net:
        url = f"http://{ip}"
        try:
            response = requests.get(url, timeout=3)
            with open(output_file, "a") as f:
                f.write(f"{url} - {response.status_code}\n")
        except:
            with open(output_file, "a") as f:
                f.write(f"{url} - ERROR\n")

def main():
    #checkregex
    ip_addr_regex = re.compile(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
    ip_subnet = re.compile(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$')
    if len(sys.argv) < 2:
        print("Usage: python heapdump.py <domain/ip>")
        sys.exit(1)
    elif os.path.isfile(sys.argv[1]):
        print("File Opened : "+ sys.argv[1])
        print("=====================================================")
        with open(sys.argv[1]) as f:
            for line in f:
                line = line.strip()
                print(line)
                if ip_subnet.match(line):
                    print("This is ipv4 subnet "+line)
                    check_by_ip_subnet(line,f"output_{timestamp}.txt")
                elif ip_addr_regex.match(line):
                    # print("this is in line "+line)
                    check_by_ip(line,f"output_{timestamp}.txt")
                else:
                    check_by_domain(line,f"output_{timestamp}.txt")
    else:
        if ip_addr_regex.match(sys.argv[1]):
            check_by_ip(sys.argv[1],f"output_{timestamp}.txt")
        else:
            check_by_domain(sys.argv[1],f"output_{timestamp}.txt")
    
if __name__ == "__main__":
    main()

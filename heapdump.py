import sys
import os
import requests
import ssl
import OpenSSL
import re


def check_by_ip(ipaddr):
    print("Actuator vulnerability checker by IP ")
    print(ipaddr)
    actuatorpath = "/actuator"
    #getting common name
    cert = ssl.get_server_certificate((ipaddr, 443))
    cert_obj = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
    cn = cert_obj.get_subject().commonName
    try:
        response = requests.get("https://"+cn+actuatorpath)
        print(response.status_code)
        # print(response.text)
        if(response.text.find("/actuator")):
            print("Confirmed Found Actuator Path") 
        else:
            print("Actuator Path Not Found")   
    except:
        print("Request Failed")
    print(cn)


def check_by_domain(domain):
    print("Actuator vulnerability checker by Domain ")
    actuatorpath = "/actuator"
    try:
        response = requests.get(domain+actuatorpath)
        print(response.status_code)
        # print(response.text)
        if(response.text.find("/actuator")):
            print("Confirmed Found Actuator Path") 
        else:
            print("Actuator Path Not Found")   
    except:
        print("Request Failed")
    print(domain)

def main():
    ip_addr_regex = re.compile(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
    if len(sys.argv) < 2:
        print("Usage: python heapdump.py <domain/ip>")
        sys.exit(1)
    else:
        if ip_addr_regex.match(sys.argv[1]):
            check_by_ip(sys.argv[1])
        else:
            check_by_domain(sys.argv[1])
    
if __name__ == "__main__":
    main()
